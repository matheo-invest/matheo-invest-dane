from datetime import date
import hashlib
from pathlib import Path

BASE_URL = "https://matheo-invest.github.io/matheo-invest-dane"
OUT_XML = Path("Matheo_Invest_dane.xml")
OUT_MD5 = Path("Matheo_Invest_dane.md5")

def build():
    today = date.today().isoformat()

    lines = []
    lines.append('<?xml version="1.0" encoding="UTF-8"?>')
    lines.append('<datasets xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
    lines.append('          xsi:noNamespaceSchemaLocation="https://www.dane.gov.pl/static/xml/otwarte_dane_latest.xsd">')

    # -------- Dataset 1: Apartamenty Sztabowa --------
    lines.append('  <dataset status="published">')
    lines.append('    <extIdent>mi_sztabowa_zbior</extIdent>')
    lines.append('    <title>')
    lines.append('      <polish>Apartamenty Sztabowa – ceny ofertowe</polish>')
    lines.append('      <english>Sztabowa Apartments – offer prices</english>')
    lines.append('    </title>')
    lines.append('    <description>')
    lines.append('      <polish>Zbiór zawiera aktualne ceny ofertowe mieszkań w inwestycji Apartamenty Sztabowa od Matheo Invest.</polish>')
    lines.append('      <english>The dataset contains current offer prices of apartments in the Sztabowa investment by Matheo Invest.</english>')
    lines.append('    </description>')
    lines.append(f'    <url>{BASE_URL}/</url>')
    lines.append('    <categories>ECON</categories>')
    lines.append('    <tags>Deweloper</tags>')
    lines.append('    <updateFrequency>daily</updateFrequency>')
    lines.append('    <hasDynamicData>false</hasDynamicData>')
    lines.append('    <hasHighValueData>true</hasHighValueData>')
    lines.append('    <hasHighValueDataFromEuropeanCommissionList>false</hasHighValueDataFromEuropeanCommissionList>')
    lines.append('    <hasResearchData>false</hasResearchData>')
    lines.append('    <resources>')
    lines.append('      <resource status="published">')
    lines.append('        <extIdent>mi_sztabowa_ceny</extIdent>')
    lines.append(f'        <url>{BASE_URL}/datasets/sztabowa/ceny.xlsx</url>')
    lines.append('        <title>')
    lines.append('          <polish>Ceny ofertowe – plik XLSX</polish>')
    lines.append('          <english>Offer prices – XLSX file</english>')
    lines.append('        </title>')
    lines.append('        <description>')
    lines.append('          <polish>Aktualne ceny ofertowe mieszkań, publikowane w formacie XLSX.</polish>')
    lines.append('          <english>Current offer prices of apartments, published in XLSX format.</english>')
    lines.append('        </description>')
    lines.append('        <availability>remote</availability>')
    lines.append(f'        <dataDate>{today}</dataDate>')
    lines.append('        <specialSigns><specialSign>X</specialSign></specialSigns>')
    lines.append('        <hasDynamicData>false</hasDynamicData>')
    lines.append('        <hasHighValueData>true</hasHighValueData>')
    lines.append('        <hasHighValueDataFromEuropeanCommissionList>false</hasHighValueDataFromEuropeanCommissionList>')
    lines.append('        <hasResearchData>false</hasResearchData>')
    lines.append('        <containsProtectedData>false</containsProtectedData>')
    lines.append('      </resource>')
    lines.append('    </resources>')
    lines.append('  </dataset>')

    # -------- Dataset 2: Klebark Park --------
    lines.append('  <dataset status="published">')
    lines.append('    <extIdent>mi_klebark_zbior</extIdent>')
    lines.append('    <title>')
    lines.append('      <polish>Klebark Park – ceny ofertowe</polish>')
    lines.append('      <english>Klebark Park – offer prices</english>')
    lines.append('    </title>')
    lines.append('    <description>')
    lines.append('      <polish>Zbiór zawiera aktualne ceny ofertowe mieszkań w inwestycji Klebark Park od Matheo Invest.</polish>')
    lines.append('      <english>The dataset contains current offer prices of apartments in the Klebark Park investment by Matheo Invest.</english>')
    lines.append('    </description>')
    lines.append(f'    <url>{BASE_URL}/</url>')
    lines.append('    <categories>ECON</categories>')
    lines.append('    <tags>Deweloper</tags>')
    lines.append('    <updateFrequency>daily</updateFrequency>')
    lines.append('    <hasDynamicData>false</hasDynamicData>')
    lines.append('    <hasHighValueData>true</hasHighValueData>')
    lines.append('    <hasHighValueDataFromEuropeanCommissionList>false</hasHighValueDataFromEuropeanCommissionList>')
    lines.append('    <hasResearchData>false</hasResearchData>')
    lines.append('    <resources>')
    lines.append('      <resource status="published">')
    lines.append('        <extIdent>mi_klebark_ceny</extIdent>')
    lines.append(f'        <url>{BASE_URL}/datasets/klebark/ceny.xlsx</url>')
    lines.append('        <title>')
    lines.append('          <polish>Ceny ofertowe – plik XLSX</polish>')
    lines.append('          <english>Offer prices – XLSX file</english>')
    lines.append('        </title>')
    lines.append('        <description>')
    lines.append('          <polish>Aktualne ceny ofertowe mieszkań, publikowane w formacie XLSX.</polish>')
    lines.append('          <english>Current offer prices of apartments, published in XLSX format.</english>')
    lines.append('        </description>')
    lines.append('        <availability>remote</availability>')
    lines.append(f'        <dataDate>{today}</dataDate>')
    lines.append('        <specialSigns><specialSign>X</specialSign></specialSigns>')
    lines.append('        <hasDynamicData>false</hasDynamicData>')
    lines.append('        <hasHighValueData>true</hasHighValueData>')
    lines.append('        <hasHighValueDataFromEuropeanCommissionList>false</hasHighValueDataFromEuropeanCommissionList>')
    lines.append('        <hasResearchData>false</hasResearchData>')
    lines.append('        <containsProtectedData>false</containsProtectedData>')
    lines.append('      </resource>')
    lines.append('    </resources>')
    lines.append('  </dataset>')

    lines.append('</datasets>')

    # zapis plików
    xml = "\n".join(lines)
    OUT_XML.write_text(xml, encoding="utf-8")
    OUT_MD5.write_text(hashlib.md5(xml.encode("utf-8")).hexdigest(), encoding="utf-8")

if __name__ == "__main__":
    build()
